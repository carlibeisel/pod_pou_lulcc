div$lt <- log(div$Acre_feet)
# Import the dataset to work with
div <- read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv')
div$lt <- log(div$Acre_feet)
# Import the dataset to work with
div <- read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv')
div$lt <- log(div$Acre_feet)
div_arma <- subset(div, (Acre_feet > 0.00001))
div_arma$lt <- log(div_arma$Acre_feet)
names <- unique(div_arma$Name)
# Find diversions with less than 34 years worth of data, and remove if there
# are data gaps, or if discharge for a given year in the middle was 0
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
remove <- c("Barber pumps",
"Mace-Mace Canal",
"River Run",
"Surprise Valley and Micron",
"Thomas Aiken Canal",
"Warm Springs Canal",
'Ester Simplot',
"Stutheit",
"Riverside Village",
"McCurry Pump",
"Golden Gate Canal",
"Capitol View Canal",
"Shakespeare",
"Suez")
div_arma <- subset(div_arma, !(Name %in% remove))
# Check after removal to ensure continuous datasets
names <- unique(div_arma$Name)
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
# Need change in a groups for a test, filter out groups with no change in urban proportion
ll.test <- div_arma %>%
group_by(Name) %>%
filter((max(class1_urban) - min(class1_urban)) > 0) %>%
ungroup()
# Need change in a groups for a test, filter out groups that use no storage over whole time period
# for stationarity test
ll.use <- div_arma %>%
group_by(Name) %>%
filter((max(AF_used) - min(AF_used)) > 0) %>%
ungroup()
# Panel dataframe for test
new_use <- pdata.frame(ll.use, index = c('Name', 'Year'))
new_use$AF_used <- as.numeric(new_use$AF_used) # change from integer to numeric for test
new_urb <- pdata.frame(ll.test, index = c('Name', 'Year'))
new <-pdata.frame(div_arma, index = c('Name', 'Year'))
urb.test <- purtest(new_urb$class1_urban, data = new_urb, lags = 'AIC', test = 'levinlin') #non-stationary
use.test <- purtest(new_use$AF_used, data = new_use, lags = 'AIC', test = 'levinlin') #non-stationary
lt.test <- purtest(new$lt, data = new, lags ='AIC', test = 'levinlin')
AF.test <- purtest(new$Acre_feet, data = new, lags = 'AIC', test = 'levinlin')
temp.test <- purtest(new$irrig_temp, data = new, lags = 'AIC', test = 'levinlin')
# Import the dataset to work with
div <- read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_013023.csv')
div$lt <- log(div$Acre_feet)
div_arma <- subset(div, (Acre_feet > 0.00001))
div_arma$lt <- log(div_arma$Acre_feet)
names <- unique(div_arma$Name)
# Find diversions with less than 34 years worth of data, and remove if there
# are data gaps, or if discharge for a given year in the middle was 0
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
remove <- c("Barber pumps",
"Mace-Mace Canal",
"River Run",
"Surprise Valley and Micron",
"Thomas Aiken Canal",
"Warm Springs Canal",
'Ester Simplot',
"Stutheit",
"Riverside Village",
"McCurry Pump",
"Golden Gate Canal",
"Capitol View Canal",
"Shakespeare",
"Suez")
div_arma <- subset(div_arma, !(Name %in% remove))
# Check after removal to ensure continuous datasets
names <- unique(div_arma$Name)
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
# Need change in a groups for a test, filter out groups with no change in urban proportion
ll.test <- div_arma %>%
group_by(Name) %>%
filter((max(class1_urban) - min(class1_urban)) > 0) %>%
ungroup()
# Need change in a groups for a test, filter out groups that use no storage over whole time period
# for stationarity test
ll.use <- div_arma %>%
group_by(Name) %>%
filter((max(AF_used) - min(AF_used)) > 0) %>%
ungroup()
# Panel dataframe for test
new_use <- pdata.frame(ll.use, index = c('Name', 'Year'))
new_use$AF_used <- as.numeric(new_use$AF_used) # change from integer to numeric for test
new_urb <- pdata.frame(ll.test, index = c('Name', 'Year'))
new <-pdata.frame(div_arma, index = c('Name', 'Year'))
urb.test <- purtest(new_urb$class1_urban, data = new_urb, lags = 'AIC', test = 'levinlin') #non-stationary
use.test <- purtest(new_use$AF_used, data = new_use, lags = 'AIC', test = 'levinlin') #non-stationary
lt.test <- purtest(new$lt, data = new, lags ='AIC', test = 'levinlin')
AF.test <- purtest(new$Acre_feet, data = new, lags = 'AIC', test = 'levinlin')
temp.test <- purtest(new$irrig_temp, data = new, lags = 'AIC', test = 'levinlin')
prcp.test <- purtest(new$irrig_prcp, data = new, lags = 'AIC', test = 'levinlin') #non-stationary
et.test <- purtest(new$et, data = new, lags = 'AIC', test = 'levinlin') # non-stationary
library(brms)
library(bayesplot)
library(dplyr)
library(Matrix)
library(tidyverse)
library(tidybayes)
library(readr)
library(tibble)
library(ggrepel)
library(flexmix)
install.packages('lattice')
install.packages("lattice")
library(modelr)
library(loo)
library(here)
install.packages('tseries')
library(tseries)
install.packages('urca')
library(urca) #kpss test
install.packages('plm')
library(plm)
install.packages('pracma')
library(pracma)
library(dplyr)
# Import the dataset to work with
div <- read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_013023.csv')
div$lt <- log(div$Acre_feet)
div_arma <- subset(div, (Acre_feet > 0.00001))
div_arma$lt <- log(div_arma$Acre_feet)
names <- unique(div_arma$Name)
# Find diversions with less than 34 years worth of data, and remove if there
# are data gaps, or if discharge for a given year in the middle was 0
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
remove <- c("Barber pumps",
"Mace-Mace Canal",
"River Run",
"Surprise Valley and Micron",
"Thomas Aiken Canal",
"Warm Springs Canal",
'Ester Simplot',
"Stutheit",
"Riverside Village",
"McCurry Pump",
"Golden Gate Canal",
"Capitol View Canal",
"Shakespeare",
"Suez")
div_arma <- subset(div_arma, !(Name %in% remove))
# Check after removal to ensure continuous datasets
names <- unique(div_arma$Name)
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
# Import the dataset to work with
div <- read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv')
div$lt <- log(div$Acre_feet)
div_arma <- subset(div, (Acre_feet > 0.00001))
div_arma$lt <- log(div_arma$Acre_feet)
names <- unique(div_arma$Name)
# Find diversions with less than 34 years worth of data, and remove if there
# are data gaps, or if discharge for a given year in the middle was 0
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
remove <- c("Barber pumps",
"Mace-Mace Canal",
"River Run",
"Surprise Valley and Micron",
"Thomas Aiken Canal",
"Warm Springs Canal",
'Ester Simplot',
"Stutheit",
"Riverside Village",
"McCurry Pump",
"Golden Gate Canal",
"Capitol View Canal",
"Shakespeare",
"Suez")
div_arma <- subset(div_arma, !(Name %in% remove))
# Check after removal to ensure continuous datasets
names <- unique(div_arma$Name)
for (i in names){
sub <- subset(div_arma, Name == i)
if (length(sub$Acre_feet) < 34){
print(i)
print(length(sub$Acre_feet))
}
}
# Need change in a groups for a test, filter out groups with no change in urban proportion
ll.test <- div_arma %>%
group_by(Name) %>%
filter((max(class1_urban) - min(class1_urban)) > 0) %>%
ungroup()
# Need change in a groups for a test, filter out groups that use no storage over whole time period
# for stationarity test
ll.use <- div_arma %>%
group_by(Name) %>%
filter((max(AF_used) - min(AF_used)) > 0) %>%
ungroup()
# Panel dataframe for test
new_use <- pdata.frame(ll.use, index = c('Name', 'Year'))
new_use$AF_used <- as.numeric(new_use$AF_used) # change from integer to numeric for test
new_urb <- pdata.frame(ll.test, index = c('Name', 'Year'))
new <-pdata.frame(div_arma, index = c('Name', 'Year'))
urb.test <- purtest(new_urb$class1_urban, data = new_urb, lags = 'AIC', test = 'levinlin') #non-stationary
use.test <- purtest(new_use$AF_used, data = new_use, lags = 'AIC', test = 'levinlin') #non-stationary
lt.test <- purtest(new$lt, data = new, lags ='AIC', test = 'levinlin')
install.packages('corrplot')
library(corrplot)
install.packages('tidyverse')
remove.packages('tidyverse')
install.packages('tidyverse')
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages('GGally')
library(GGally)
install.packages('ggfortify')
library(ggfortify)
remove.packages('dplyr')
install.packages('dplyr')
install.packages('Kendall')
install.packages("dplyr")
library(Kendall)
# Without zeros
data <- data.frame(read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv'))
data <- data[-c(1,6,37,38)] # drops Python index output with csv
data <- subset(data, select=-c(Month, DayofYear, Irrigation.Year, Sum, Diversion..cfs.))
data['Mar_et'][is.na(data['Mar_et'])] <- 0 #fill NA et values with 0
data['contagion'][is.na(data['contagion'])] <- 100 # fill NA contagion values with 100
nas <- data[rowSums(is.na(data)) > 0, ] #check for any data with remaining NA values
data <- na.omit(data)
scale2sd <- function(x){
(x - mean(x))/(sd(x)*2)
}
col_name <- c('ant_prcp',
'irrig_prcp',
'irrig_temp',
'JuneAug_temp',
'Mar_tmp',
'Mar_prcp',
'LP_inflows',
'Max_Fill',
'Carryover',
'AF_used',
'AF_remaining',
'AF_available')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- scale2sd(data[,i])
}
col_name <- c('class1_urban',
'class2_crops',
'contagion',
'largest_patch_index')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- (data[,i])/100
}
tt <- table(data$Name)
data <- subset(data, Name %in% names(tt[tt>4]))
# Without zeros
data <- data.frame(read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv'))
data <- data[-c(1,6,37,38)] # drops Python index output with csv
data <- subset(data, select=-c(Month, DayofYear, Irrigation.Year, Sum, Diversion..cfs.))
data['Mar_et'][is.na(data['Mar_et'])] <- 0 #fill NA et values with 0
data['contagion'][is.na(data['contagion'])] <- 100 # fill NA contagion values with 100
nas <- data[rowSums(is.na(data)) > 0, ] #check for any data with remaining NA values
data <- na.omit(data)
scale2sd <- function(x){
(x - mean(x))/(sd(x)*2)
}
col_name <- c('ant_prcp',
'irrig_prcp',
'irrig_temp',
'JuneAug_temp',
'Mar_tmp',
'Mar_prcp',
'LP_inflows',
'Max_Fill',
'Carryover',
'AF_used',
'AF_remaining',
'AF_available')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- scale2sd(data[,i])
}
col_name <- c('class1_urban',
'class2_crops',
'contagion',
'largest_patch_index')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- (data[,i])/100
}
tt <- table(data$Name)
data <- subset(data, Name %in% names(tt[tt>4]))
# For data with zeros
write.csv(data, '/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv', row.names = FALSE)
data$perc_used <- ifelse(data$AF_available > 0, data$AF_used/data$AF_available, NA)
data$wr_storage <- ifelse(data$AF_available >0, 1, 0)
write.csv(data, '/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv', row.names = FALSE)
pdf(file='~/Desktop/diversion_models/Figures/acreft_hist_whole.pdf',
width=4,
height=4)
pdf(file='~/Desktop/diversion_models/Figures/acreft_hist_whole.pdf',
width=4,
height=4)
pdf(file='/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Figures/acreft_hist_whole.pdf',
width=4,
height=4)
hist(data$Acre_feet,
breaks=15,
prob=TRUE,
col='lightblue',
xlab='Discharge (Acre-ft/yr)',
main = 'Distribution of Annual Discharge',
ylim=c(0, 1.0e-04))
install.packages('corrplot')
library(corrplot)
install.packages('tidyverse')
remove.packages('tidyverse')
install.packages('tidyverse')
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages('GGally')
library(GGally)
install.packages('ggfortify')
library(ggfortify)
remove.packages('dplyr')
install.packages('dplyr')
install.packages('Kendall')
library(Kendall)
install.packages("Kendall")
# Without zeros
data <- data.frame(read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv'))
data <- data[-c(1,6,37,38)] # drops Python index output with csv
data <- subset(data, select=-c(Month, DayofYear, Irrigation.Year, Sum, Diversion..cfs.))
data['Mar_et'][is.na(data['Mar_et'])] <- 0 #fill NA et values with 0
data['contagion'][is.na(data['contagion'])] <- 100 # fill NA contagion values with 100
nas <- data[rowSums(is.na(data)) > 0, ] #check for any data with remaining NA values
data <- na.omit(data)
scale2sd <- function(x){
(x - mean(x))/(sd(x)*2)
}
col_name <- c('ant_prcp',
'irrig_prcp',
'irrig_temp',
'JuneAug_temp',
'Mar_tmp',
'Mar_prcp',
'LP_inflows',
'Max_Fill',
'Carryover',
'AF_used',
'AF_remaining',
'AF_available')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- scale2sd(data[,i])
}
col_name <- c('class1_urban',
'class2_crops',
'contagion',
'largest_patch_index')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- (data[,i])/100
}
tt <- table(data$Name)
data <- subset(data, Name %in% names(tt[tt>4]))
data$perc_used <- ifelse(data$AF_available > 0, data$AF_used/data$AF_available, NA)
data$wr_storage <- ifelse(data$AF_available >0, 1, 0)
write.csv(data, '/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv', row.names = FALSE)
# Without zeros
data <- data.frame(read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv'))
data <- data[-c(1,6,37,38)] # drops Python index output with csv
data <- subset(data, select=-c(Month, DayofYear, Irrigation.Year, Sum, Diversion..cfs.))
data['Mar_et'][is.na(data['Mar_et'])] <- 0 #fill NA et values with 0
data['contagion'][is.na(data['contagion'])] <- 100 # fill NA contagion values with 100
nas <- data[rowSums(is.na(data)) > 0, ] #check for any data with remaining NA values
data <- na.omit(data)
scale2sd <- function(x){
(x - mean(x))/(sd(x)*2)
}
col_name <- c('ant_prcp',
'irrig_prcp',
'irrig_temp',
'JuneAug_temp',
'Mar_tmp',
'Mar_prcp',
'LP_inflows',
'Max_Fill',
'Carryover',
'AF_used',
'AF_remaining',
'AF_available')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- scale2sd(data[,i])
}
col_name <- c('class1_urban',
'class2_crops',
'contagion',
'largest_patch_index')
for (i in col_name) {
name <- colnames(data[i])
new_col_name <- paste('scale_', name, sep = "")
data[new_col_name] <- (data[,i])/100
}
tt <- table(data$Name)
data <- subset(data, Name %in% names(tt[tt>4]))
data$perc_used <- ifelse(data$AF_available > 0, data$AF_used/data$AF_available, NA)
data$wr_storage <- ifelse(data$AF_available >0, 1, 0)
write.csv(data, '/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050324.csv', row.names = FALSE)
install.packages('corrplot')
library(corrplot)
install.packages('tidyverse')
remove.packages('tidyverse')
install.packages('tidyverse')
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages('GGally')
library(GGally)
install.packages('ggfortify')
library(ggfortify)
remove.packages('dplyr')
install.packages('dplyr')
install.packages('Kendall')
install.packages("dplyr")
library(Kendall)
# Without zeros
data <- data.frame(read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050824.csv'))
data <- data[-c(1,6,37,38)] # drops Python index output with csv
data <- subset(data, select=-c(Month, DayofYear, Irrigation.Year, Sum, Diversion..cfs.))
data['Mar_et'][is.na(data['Mar_et'])] <- 0 #fill NA et values with 0
data['contagion'][is.na(data['contagion'])] <- 100 # fill NA contagion values with 100
# Without zeros
data <- data.frame(read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050824.csv'))
data <- data[-c(1,6,37,38)] # drops Python index output with csv
data <- subset(data, select=-c(Month, DayofYear, Irrigation.Year, Sum, Diversion..cfs.))
install.packages('corrplot')
library(corrplot)
install.packages('tidyverse')
remove.packages('tidyverse')
install.packages('tidyverse')
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages('GGally')
library(GGally)
install.packages('ggfortify')
library(ggfortify)
remove.packages('dplyr')
install.packages('dplyr')
install.packages('Kendall')
install.packages("dplyr")
library(Kendall)
# Without zeros
data <- data.frame(read.csv('/Users/dbeisel/Desktop/DATA/Bridget/pod_pou_lulcc/Data.Inputs/input_full_050824.csv'))
data <- data[-c(1,6,37,38)] # drops Python index output with csv
data <- subset(data, select=-c(Month, DayofYear, Irrigation.Year, Sum, Diversion..cfs.))
